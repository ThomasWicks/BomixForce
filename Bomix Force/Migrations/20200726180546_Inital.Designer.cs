// <auto-generated />
using System;
using Bomix_Force.Data.Context;
using Bomix_Force.Data.Entities;
using Bomix_Force.Data.Enum;
using Bomix_Force.Util;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bomix_Force.Migrations
{
    [DbContext(typeof(ModelContext))]
    [Migration("20200726180546_Inital")]
    partial class Inital
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bomix_Force.Data.Entities.Access", b =>
                {
                    b.Property<int>("IdProfile")
                        .HasColumnName("ID_PROFILE")
                        .HasColumnType("int");

                    b.Property<int>("IdPermission")
                        .HasColumnName("ID_PERMISSION")
                        .HasColumnType("int");

                    b.Property<int?>("IdUser")
                        .HasColumnName("ID_USER")
                        .HasColumnType("int");

                    b.HasKey("IdProfile", "IdPermission");

                    b.HasIndex("IdPermission");

                    b.ToTable("ACCESS");
                });

            modelBuilder.Entity("Bomix_Force.Data.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cnpj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Bomix_Force.Data.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id_Order")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Status_art")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Bomix_Force.Data.Entities.N_conformity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id_Order")
                        .HasColumnType("int");

                    b.Property<string>("Lot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("N_conformity");
                });

            modelBuilder.Entity("Bomix_Force.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_item")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Status_Order")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Bomix_Force.Data.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("CLAIMTYPE")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ClaimValue")
                        .HasColumnName("CLAIMVALUE")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("IdUser")
                        .HasColumnName("ID_USER")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PERMISSION");
                });

            modelBuilder.Entity("Bomix_Force.Data.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("Company_Id")
                        .HasColumnType("int");

                    b.Property<int>("Cpf")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id_Order")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Tel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OrderId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Bomix_Force.Data.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Active")
                        .IsRequired()
                        .HasColumnName("ACTIVE")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("NAME")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PROFILE");
                });

            modelBuilder.Entity("Bomix_Force.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Active")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cpf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("IdEstablishment")
                        .HasColumnType("int");

                    b.Property<int>("IdProfile")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEndDateUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.Property<bool>("RecieveNotification")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("User1");
                });

            modelBuilder.Entity("Bomix_Force.Data.Entities.UserLogin", b =>
                {
                    b.Property<int>("IdUser")
                        .HasColumnName("ID_USER")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("LOGINPROVIDER")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnName("PROVIDERKEY")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("IdUser", "LoginProvider", "ProviderKey");

                    b.ToTable("USERLOGIN");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Bomix_Force.Data.Entities.Access", b =>
                {
                    b.HasOne("Bomix_Force.Data.Entities.Permission", "Permission")
                        .WithMany("AccessList")
                        .HasForeignKey("IdPermission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bomix_Force.Data.Entities.Profile", "Profile")
                        .WithMany("AccessList")
                        .HasForeignKey("IdProfile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bomix_Force.Data.Entities.Item", b =>
                {
                    b.HasOne("Bomix_Force.Data.Entities.Order", "Order")
                        .WithMany("Item")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("Bomix_Force.Data.Entities.N_conformity", b =>
                {
                    b.HasOne("Bomix_Force.Data.Entities.Order", "Order")
                        .WithMany("N_Conformities")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("Bomix_Force.Data.Entities.Order", b =>
                {
                    b.HasOne("Bomix_Force.Data.Entities.Company", "Company")
                        .WithMany("Orders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bomix_Force.Data.Entities.Person", b =>
                {
                    b.HasOne("Bomix_Force.Data.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Bomix_Force.Data.Entities.Order", "Order")
                        .WithMany("Person")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("Bomix_Force.Data.Entities.User", b =>
                {
                    b.HasOne("Bomix_Force.Data.Entities.Profile", "Profile")
                        .WithMany("UserList")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("Bomix_Force.Data.Entities.UserLogin", b =>
                {
                    b.HasOne("Bomix_Force.Data.Entities.User", "User")
                        .WithMany("UserLoginList")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
            modelBuilder.Entity<Profile>().HasData(
            new Profile()
            {
                Id = (int)ProfileEnum.Administrador,
                Name = EnumDescription.GetEnumDescription(ProfileEnum.Administrador),
                Active = ((int)GenericStatusEnum.Active).ToString()
            },
            new Profile()
            {
                Id = (int)ProfileEnum.Gestor,
                Name = EnumDescription.GetEnumDescription(ProfileEnum.Gestor),
                Active = ((int)GenericStatusEnum.Active).ToString()
            },
            new Profile()
            {
                Id = (int)ProfileEnum.Visualizador,
                Name = EnumDescription.GetEnumDescription(ProfileEnum.Visualizador),
                Active = ((int)GenericStatusEnum.Active).ToString()
            });
            modelBuilder.Entity<Permission>().HasData(
                new Permission()
                {
                    Id = 1,
                    ClaimType = EnumDescription.GetEnumDescription(TypePermissionEnum.User),
                    ClaimValue = EnumDescription.GetEnumDescription(ValuePermissionEnum.CONSULT)
                },
                new Permission()
                {
                    Id = 2,
                    ClaimType = EnumDescription.GetEnumDescription(TypePermissionEnum.User),
                    ClaimValue = EnumDescription.GetEnumDescription(ValuePermissionEnum.DELETE)
                },
                new Permission()
                {
                    Id = 3,
                    ClaimType = EnumDescription.GetEnumDescription(TypePermissionEnum.User),
                    ClaimValue = EnumDescription.GetEnumDescription(ValuePermissionEnum.INSERT)
                },
                new Permission()
                {
                    Id = 10,
                    ClaimType = EnumDescription.GetEnumDescription(TypePermissionEnum.Permission),
                    ClaimValue = EnumDescription.GetEnumDescription(ValuePermissionEnum.INSERT)
                },
                new Permission()
                {
                    Id = 11,
                    ClaimType = EnumDescription.GetEnumDescription(TypePermissionEnum.Order),
                    ClaimValue = EnumDescription.GetEnumDescription(ValuePermissionEnum.CONSULT)
                },
                new Permission()
                {
                    Id = 12,
                    ClaimType = EnumDescription.GetEnumDescription(TypePermissionEnum.Order),
                    ClaimValue = EnumDescription.GetEnumDescription(ValuePermissionEnum.DELETE)
                },
                new Permission()
                {
                    Id = 13,
                    ClaimType = EnumDescription.GetEnumDescription(TypePermissionEnum.Order),
                    ClaimValue = EnumDescription.GetEnumDescription(ValuePermissionEnum.INSERT)
                });

            modelBuilder.Entity<Permission>().HasData(
                new Access() { IdProfile = (int)ProfileEnum.Administrador, IdPermission = 1 },
                new Access() { IdProfile = (int)ProfileEnum.Administrador, IdPermission = 2 },
                new Access() { IdProfile = (int)ProfileEnum.Administrador, IdPermission = 3 },
                new Access() { IdProfile = (int)ProfileEnum.Administrador, IdPermission = 11 },
                new Access() { IdProfile = (int)ProfileEnum.Administrador, IdPermission = 12 },
                new Access() { IdProfile = (int)ProfileEnum.Administrador, IdPermission = 13 },
               new Access() { IdProfile = (int)ProfileEnum.Gestor, IdPermission = 1 },
                new Access() { IdProfile = (int)ProfileEnum.Gestor, IdPermission = 2 },
                new Access() { IdProfile = (int)ProfileEnum.Gestor, IdPermission = 3 },
                new Access() { IdProfile = (int)ProfileEnum.Gestor, IdPermission = 11 },
                new Access() { IdProfile = (int)ProfileEnum.Gestor, IdPermission = 12 },
                new Access() { IdProfile = (int)ProfileEnum.Gestor, IdPermission = 13 });
        }
    }
}
